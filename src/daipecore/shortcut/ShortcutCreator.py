import os
from pyfonybundles.loader import pyfony_bundles_loader
from pyfonybundles.Bundle import Bundle
from injecta.package import path_resolver


class ShortcutCreator:
    def prepare_daipe_py(self, path=None):
        if path is None:
            path = os.path.join(os.getcwd(), "src")

        daipe_py_path = os.path.join(path, "daipe.py")

        code = self.__prepare_code()
        self.__write_code(code, daipe_py_path)

    def __prepare_code(self):
        bundles = pyfony_bundles_loader.load_bundles()

        def get_root_module_name(bundle: Bundle):
            return bundle.__module__.split(".")[0]

        def get_imports_module_path(root_module_name: str):
            root_module_path = path_resolver.resolve_path(root_module_name)

            return root_module_path + "/imports.py"

        def load_imports_module(root_module_name: str, imports_module_path: str):
            header = f"# imports from {root_module_name}"

            with open(imports_module_path, "r", encoding="utf-8") as f:
                return header + "\n" + f.read()

        import_module_names = [get_root_module_name(bundle) for bundle in bundles]
        import_modules_mapping = {
            import_module_name: get_imports_module_path(import_module_name) for import_module_name in import_module_names
        }
        imports_code = [
            load_imports_module(root_module_name, imports_module_path)
            for root_module_name, imports_module_path in import_modules_mapping.items()
            if os.path.exists(imports_module_path)
        ]

        warning = "# ---------\n# Warning: this file is autogenerated, please do NOT change anything manually\n# ---------\n\n"
        pylint_exception = "# pylint: disable=unused-import, reimported\n\n"

        return warning + pylint_exception + "\n".join(imports_code)

    def __write_code(self, code: str, path: str):
        with open(path, "w", encoding="utf-8") as f:
            f.write(code)


if __name__ == "__main__":
    ShortcutCreator().prepare_daipe_py()
